// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	auth "imy/internal/handler/auth"
	chat "imy/internal/handler/chat"
	friend "imy/internal/handler/friend"
	v2auth "imy/internal/handler/v2/auth"
	v2friend "imy/internal/handler/v2/friend"
	v2user "imy/internal/handler/v2/user"
	v2verify "imy/internal/handler/v2/verify"
	version "imy/internal/handler/version"
	"imy/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 身份验证
				Method:  http.MethodPost,
				Path:    "/authCheck",
				Handler: auth.AuthCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/emailCode",
				Handler: auth.EmailCodeHandler(serverCtx),
			},
			{
				// 邮箱密码登陆
				Method:  http.MethodPost,
				Path:    "/emailPasswordLogin",
				Handler: auth.EmailPasswordLoginHandler(serverCtx),
			},
			{
				// 邮箱密码注册
				Method:  http.MethodPost,
				Path:    "/emailPasswordRegister",
				Handler: auth.EmailPasswordRegisterHandler(serverCtx),
			},
			{
				// 获取邮箱验证码
				Method:  http.MethodPost,
				Path:    "/getEmailCode",
				Handler: auth.GetEmailCodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 群聊添加成员
				Method:  http.MethodPost,
				Path:    "/addMembers",
				Handler: chat.AddMembersHandler(serverCtx),
			},
			{
				// 创建群聊
				Method:  http.MethodPost,
				Path:    "/createGroup",
				Handler: chat.CreateGroupConversationHandler(serverCtx),
			},
			{
				// 创建或获取单聊会话
				Method:  http.MethodPost,
				Path:    "/createPrivate",
				Handler: chat.CreatePrivateConversationHandler(serverCtx),
			},
			{
				// 获取会话详情
				Method:  http.MethodPost,
				Path:    "/getConversationDetail",
				Handler: chat.GetConversationDetailHandler(serverCtx),
			},
			{
				// 获取我的会话列表
				Method:  http.MethodPost,
				Path:    "/getConversations",
				Handler: chat.GetConversationsHandler(serverCtx),
			},
			{
				// 拉取历史消息
				Method:  http.MethodPost,
				Path:    "/getMessages",
				Handler: chat.GetMessagesHandler(serverCtx),
			},
			{
				// 获取未读计数
				Method:  http.MethodPost,
				Path:    "/getUnreadCounts",
				Handler: chat.GetUnreadCountsHandler(serverCtx),
			},
			{
				// 上报已读进度
				Method:  http.MethodPost,
				Path:    "/readMessages",
				Handler: chat.ReadMessagesHandler(serverCtx),
			},
			{
				// 撤回消息
				Method:  http.MethodPost,
				Path:    "/recallMessage",
				Handler: chat.RecallMessageHandler(serverCtx),
			},
			{
				// 群聊移除成员/退群
				Method:  http.MethodPost,
				Path:    "/removeMember",
				Handler: chat.RemoveMemberHandler(serverCtx),
			},
			{
				// 发送消息
				Method:  http.MethodPost,
				Path:    "/sendMessage",
				Handler: chat.SendMessageHandler(serverCtx),
			},
			{
				// 更新个人会话设置
				Method:  http.MethodPost,
				Path:    "/updateSettings",
				Handler: chat.UpdateConversationSettingsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/chat"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 添加好友
				Method:  http.MethodPost,
				Path:    "/addFriend",
				Handler: friend.AddFriendHandler(serverCtx),
			},
			{
				// 获取好友列表
				Method:  http.MethodPost,
				Path:    "/getFriendList",
				Handler: friend.GetFriendListHandler(serverCtx),
			},
			{
				// 搜索用户
				Method:  http.MethodPost,
				Path:    "/searchUser",
				Handler: friend.SearchUserHandler(serverCtx),
			},
			{
				// 处理好友验证
				Method:  http.MethodPost,
				Path:    "/validFriend",
				Handler: friend.ValidFriendHandler(serverCtx),
			},
			{
				// 获取好友验证表
				Method:  http.MethodPost,
				Path:    "/validFriendList",
				Handler: friend.ValidFriendListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/friend"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 账号登陆
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: v2auth.AccountLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 账号注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: v2auth.AccountRegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取好友列表
				Method:  http.MethodGet,
				Path:    "/all",
				Handler: v2friend.AllFriendHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v2/friend"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 根据用户名得到账号
				Method:  http.MethodPost,
				Path:    "/getName",
				Handler: v2user.GetAccountByNameHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v2/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取验证消息(所有)
				Method:  http.MethodGet,
				Path:    "/all",
				Handler: v2verify.AllVerifyHandler(serverCtx),
			},
			{
				// 处理验证
				Method:  http.MethodPost,
				Path:    "/deal",
				Handler: v2verify.DealVerifyHandler(serverCtx),
			},
			{
				// 发送验证
				Method:  http.MethodPost,
				Path:    "/send",
				Handler: v2verify.SendVerifyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v2/verify"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 版本信息
				Method:  http.MethodGet,
				Path:    "/version",
				Handler: version.VersionHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)
}
