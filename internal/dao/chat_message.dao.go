// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"
	"time"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (c *chatMessage) DB() *gorm.DB {
	return c.chatMessageDo.DO.UnderlyingDB()
}

func (c *chatMessage) Get(ctx context.Context, id uint64, withDeleted ...bool) (result *model.ChatMessage, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatMessage).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (c *chatMessage) GetList(ctx context.Context, id []uint64, withDeleted ...bool) (list []*model.ChatMessage, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatMessage).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListChatMessageParams represents the params to list models
type ListChatMessageParams struct {
	dbgen.Pager

	ConversationId   uint32     // optional
	SendUuid         string     // optional, likely
	ClientMsgId      string     // optional, likely
	MsgType          int8       // optional
	Content          string     // optional, likely
	ContentExtra     string     // optional, likely
	ReplyToMessageId uint64     // optional
	MentionedUuids   string     // optional, likely
	IsSystem         bool       // optional
	IsRevoked        bool       // optional
	RevokedAt        *time.Time // optional

	Deleted bool // optional
}

// List returns the specified models from database by params
func (c *chatMessage) List(ctx context.Context, params *ListChatMessageParams) (list []*model.ChatMessage, total int64, err error) {
	tx := c.DB().WithContext(ctx).Table(model.TableNameChatMessage).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.ConversationId).IsZero(), "conversation_id = ?", params.ConversationId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.SendUuid).IsZero(), "send_uuid like ?", "%"+params.SendUuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.ClientMsgId).IsZero(), "client_msg_id like ?", "%"+params.ClientMsgId+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.MsgType).IsZero(), "msg_type = ?", params.MsgType)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Content).IsZero(), "content like ?", "%"+params.Content+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.ContentExtra).IsZero(), "content_extra like ?", "%"+params.ContentExtra+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.ReplyToMessageId).IsZero(), "reply_to_message_id = ?", params.ReplyToMessageId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.MentionedUuids).IsZero(), "mentioned_uuids like ?", "%"+params.MentionedUuids+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.IsSystem).IsZero(), "is_system = ?", params.IsSystem)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.IsRevoked).IsZero(), "is_revoked = ?", params.IsRevoked)).
		Scopes(dbgen.Nullable(params.RevokedAt != nil, "revoked_at = ?", func() any { return *params.RevokedAt })).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (c *chatMessage) Update(ctx context.Context, model *model.ChatMessage, cols ...string) error {
	return c.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (c *chatMessage) DeleteByID(ctx context.Context, id uint64) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatMessage).
		Delete(&model.ChatMessage{}, id).Error
}

func (c *chatMessage) Destroy(ctx context.Context, id uint64) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatMessage).
		Unscoped().
		Delete(&model.ChatMessage{}, id).Error
}
