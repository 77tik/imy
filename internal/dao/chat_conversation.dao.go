// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (c *chatConversation) DB() *gorm.DB {
	return c.chatConversationDo.DO.UnderlyingDB()
}

func (c *chatConversation) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.ChatConversation, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatConversation).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (c *chatConversation) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.ChatConversation, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatConversation).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListChatConversationParams represents the params to list models
type ListChatConversationParams struct {
	dbgen.Pager

	Type          int8   // optional
	PrivateKey    string // optional
	CreateUuid    string // optional, likely
	Name          string // optional, likely
	MemberCount   uint32 // optional
	LastMessageId uint64 // optional
	Avatar        string // optional, likely
	Extra         string // optional, likely

	Deleted bool // optional
}

// List returns the specified models from database by params
func (c *chatConversation) List(ctx context.Context, params *ListChatConversationParams) (list []*model.ChatConversation, total int64, err error) {
	tx := c.DB().WithContext(ctx).Table(model.TableNameChatConversation).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Type).IsZero(), "type = ?", params.Type)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.PrivateKey).IsZero(), "private_key = ?", params.PrivateKey)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.CreateUuid).IsZero(), "create_uuid like ?", "%"+params.CreateUuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Name).IsZero(), "name like ?", "%"+params.Name+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.MemberCount).IsZero(), "member_count = ?", params.MemberCount)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.LastMessageId).IsZero(), "last_message_id = ?", params.LastMessageId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Avatar).IsZero(), "avatar like ?", "%"+params.Avatar+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Extra).IsZero(), "extra like ?", "%"+params.Extra+"%")).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (c *chatConversation) Update(ctx context.Context, model *model.ChatConversation, cols ...string) error {
	return c.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (c *chatConversation) DeleteByID(ctx context.Context, id uint32) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatConversation).
		Delete(&model.ChatConversation{}, id).Error
}

func (c *chatConversation) Destroy(ctx context.Context, id uint32) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatConversation).
		Unscoped().
		Delete(&model.ChatConversation{}, id).Error
}
