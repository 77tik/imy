// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newChatConversationMember(db *gorm.DB, opts ...gen.DOOption) chatConversationMember {
	_chatConversationMember := chatConversationMember{}

	_chatConversationMember.chatConversationMemberDo.UseDB(db, opts...)
	_chatConversationMember.chatConversationMemberDo.UseModel(&model.ChatConversationMember{})

	tableName := _chatConversationMember.chatConversationMemberDo.TableName()
	_chatConversationMember.ALL = field.NewAsterisk(tableName)
	_chatConversationMember.ID = field.NewUint32(tableName, "id")
	_chatConversationMember.ConversationID = field.NewUint32(tableName, "conversation_id")
	_chatConversationMember.UserUUID = field.NewString(tableName, "user_uuid")
	_chatConversationMember.Role = field.NewInt8(tableName, "role")
	_chatConversationMember.LastReadMessageID = field.NewUint64(tableName, "last_read_message_id")
	_chatConversationMember.LastReadAt = field.NewTime(tableName, "last_read_at")
	_chatConversationMember.MuteUntil = field.NewTime(tableName, "mute_until")
	_chatConversationMember.IsPinned = field.NewBool(tableName, "is_pinned")
	_chatConversationMember.Alias_ = field.NewString(tableName, "alias")
	_chatConversationMember.UnreadCount = field.NewUint32(tableName, "unread_count")
	_chatConversationMember.Extra = field.NewString(tableName, "extra")
	_chatConversationMember.CreatedAt = field.NewTime(tableName, "created_at")
	_chatConversationMember.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chatConversationMember.DeletedAt = field.NewField(tableName, "deleted_at")

	_chatConversationMember.fillFieldMap()

	return _chatConversationMember
}

// chatConversationMember 聊天会话成员表
type chatConversationMember struct {
	chatConversationMemberDo chatConversationMemberDo

	ALL               field.Asterisk
	ID                field.Uint32 // 主键id
	ConversationID    field.Uint32 // 会话id
	UserUUID          field.String // 成员uuid
	Role              field.Int8   // 成员角色，1表示普通成员，2表示管理员，群聊使用
	LastReadMessageID field.Uint64 // 最后已读消息ID
	LastReadAt        field.Time   // 最后已读时间
	MuteUntil         field.Time   // 免打扰截止时间
	IsPinned          field.Bool   // 是否置顶
	Alias_            field.String // 群内昵称/备注
	UnreadCount       field.Uint32 // 未读数（可选缓存字段）
	Extra             field.String // 扩展信息
	CreatedAt         field.Time   // 数据插入时间
	UpdatedAt         field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt         field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (c chatConversationMember) Table(newTableName string) *chatConversationMember {
	c.chatConversationMemberDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatConversationMember) As(alias string) *chatConversationMember {
	c.chatConversationMemberDo.DO = *(c.chatConversationMemberDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatConversationMember) updateTableName(table string) *chatConversationMember {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.ConversationID = field.NewUint32(table, "conversation_id")
	c.UserUUID = field.NewString(table, "user_uuid")
	c.Role = field.NewInt8(table, "role")
	c.LastReadMessageID = field.NewUint64(table, "last_read_message_id")
	c.LastReadAt = field.NewTime(table, "last_read_at")
	c.MuteUntil = field.NewTime(table, "mute_until")
	c.IsPinned = field.NewBool(table, "is_pinned")
	c.Alias_ = field.NewString(table, "alias")
	c.UnreadCount = field.NewUint32(table, "unread_count")
	c.Extra = field.NewString(table, "extra")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chatConversationMember) WithContext(ctx context.Context) *chatConversationMemberDo {
	return c.chatConversationMemberDo.WithContext(ctx)
}

func (c chatConversationMember) TableName() string { return c.chatConversationMemberDo.TableName() }

func (c chatConversationMember) Alias() string { return c.chatConversationMemberDo.Alias() }

func (c chatConversationMember) Columns(cols ...field.Expr) gen.Columns {
	return c.chatConversationMemberDo.Columns(cols...)
}

func (c *chatConversationMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatConversationMember) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["conversation_id"] = c.ConversationID
	c.fieldMap["user_uuid"] = c.UserUUID
	c.fieldMap["role"] = c.Role
	c.fieldMap["last_read_message_id"] = c.LastReadMessageID
	c.fieldMap["last_read_at"] = c.LastReadAt
	c.fieldMap["mute_until"] = c.MuteUntil
	c.fieldMap["is_pinned"] = c.IsPinned
	c.fieldMap["alias"] = c.Alias_
	c.fieldMap["unread_count"] = c.UnreadCount
	c.fieldMap["extra"] = c.Extra
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chatConversationMember) clone(db *gorm.DB) chatConversationMember {
	c.chatConversationMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatConversationMember) replaceDB(db *gorm.DB) chatConversationMember {
	c.chatConversationMemberDo.ReplaceDB(db)
	return c
}

type chatConversationMemberDo struct{ gen.DO }

func (c chatConversationMemberDo) Debug() *chatConversationMemberDo {
	return c.withDO(c.DO.Debug())
}

func (c chatConversationMemberDo) WithContext(ctx context.Context) *chatConversationMemberDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatConversationMemberDo) ReadDB() *chatConversationMemberDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatConversationMemberDo) WriteDB() *chatConversationMemberDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatConversationMemberDo) Session(config *gorm.Session) *chatConversationMemberDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatConversationMemberDo) Clauses(conds ...clause.Expression) *chatConversationMemberDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatConversationMemberDo) Returning(value interface{}, columns ...string) *chatConversationMemberDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatConversationMemberDo) Not(conds ...gen.Condition) *chatConversationMemberDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatConversationMemberDo) Or(conds ...gen.Condition) *chatConversationMemberDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatConversationMemberDo) Select(conds ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatConversationMemberDo) Where(conds ...gen.Condition) *chatConversationMemberDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatConversationMemberDo) Order(conds ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatConversationMemberDo) Distinct(cols ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatConversationMemberDo) Omit(cols ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatConversationMemberDo) Join(table schema.Tabler, on ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatConversationMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatConversationMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatConversationMemberDo) Group(cols ...field.Expr) *chatConversationMemberDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatConversationMemberDo) Having(conds ...gen.Condition) *chatConversationMemberDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatConversationMemberDo) Limit(limit int) *chatConversationMemberDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatConversationMemberDo) Offset(offset int) *chatConversationMemberDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatConversationMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatConversationMemberDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatConversationMemberDo) Unscoped() *chatConversationMemberDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatConversationMemberDo) Create(values ...*model.ChatConversationMember) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatConversationMemberDo) CreateInBatches(values []*model.ChatConversationMember, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatConversationMemberDo) Save(values ...*model.ChatConversationMember) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatConversationMemberDo) First() (*model.ChatConversationMember, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversationMember), nil
	}
}

func (c chatConversationMemberDo) Take() (*model.ChatConversationMember, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversationMember), nil
	}
}

func (c chatConversationMemberDo) Last() (*model.ChatConversationMember, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversationMember), nil
	}
}

func (c chatConversationMemberDo) Find() ([]*model.ChatConversationMember, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatConversationMember), err
}

func (c chatConversationMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatConversationMember, err error) {
	buf := make([]*model.ChatConversationMember, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatConversationMemberDo) FindInBatches(result *[]*model.ChatConversationMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatConversationMemberDo) Attrs(attrs ...field.AssignExpr) *chatConversationMemberDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatConversationMemberDo) Assign(attrs ...field.AssignExpr) *chatConversationMemberDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatConversationMemberDo) Joins(fields ...field.RelationField) *chatConversationMemberDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatConversationMemberDo) Preload(fields ...field.RelationField) *chatConversationMemberDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatConversationMemberDo) FirstOrInit() (*model.ChatConversationMember, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversationMember), nil
	}
}

func (c chatConversationMemberDo) FirstOrCreate() (*model.ChatConversationMember, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversationMember), nil
	}
}

func (c chatConversationMemberDo) FindByPage(offset int, limit int) (result []*model.ChatConversationMember, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatConversationMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatConversationMemberDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatConversationMemberDo) Delete(models ...*model.ChatConversationMember) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatConversationMemberDo) withDO(do gen.Dao) *chatConversationMemberDo {
	c.DO = *do.(*gen.DO)
	return c
}
