// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (f *friendV2) DB() *gorm.DB {
	return f.friendV2Do.DO.UnderlyingDB()
}

func (f *friendV2) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.FriendV2, err error) {
	err = f.DB().WithContext(ctx).Table(model.TableNameFriendV2).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (f *friendV2) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.FriendV2, err error) {
	err = f.DB().WithContext(ctx).Table(model.TableNameFriendV2).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListFriendV2Params represents the params to list models
type ListFriendV2Params struct {
	dbgen.Pager

	SendId uint32 // optional
	RevId  uint32 // optional

	Deleted bool // optional
}

// List returns the specified models from database by params
func (f *friendV2) List(ctx context.Context, params *ListFriendV2Params) (list []*model.FriendV2, total int64, err error) {
	tx := f.DB().WithContext(ctx).Table(model.TableNameFriendV2).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.SendId).IsZero(), "send_id = ?", params.SendId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.RevId).IsZero(), "rev_id = ?", params.RevId)).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (f *friendV2) Update(ctx context.Context, model *model.FriendV2, cols ...string) error {
	return f.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (f *friendV2) DeleteByID(ctx context.Context, id uint32) error {
	return f.DB().WithContext(ctx).Table(model.TableNameFriendV2).
		Delete(&model.FriendV2{}, id).Error
}

func (f *friendV2) Destroy(ctx context.Context, id uint32) error {
	return f.DB().WithContext(ctx).Table(model.TableNameFriendV2).
		Unscoped().
		Delete(&model.FriendV2{}, id).Error
}
