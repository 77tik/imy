// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"
	"time"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (c *chatConversationMember) DB() *gorm.DB {
	return c.chatConversationMemberDo.DO.UnderlyingDB()
}

func (c *chatConversationMember) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.ChatConversationMember, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatConversationMember).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (c *chatConversationMember) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.ChatConversationMember, err error) {
	err = c.DB().WithContext(ctx).Table(model.TableNameChatConversationMember).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListChatConversationMemberParams represents the params to list models
type ListChatConversationMemberParams struct {
	dbgen.Pager

	ConversationId    uint32    // optional
	UserUuid          string    // optional, likely
	Role              int8      // optional
	LastReadMessageId uint64    // optional
	LastReadAt        time.Time // optional
	MuteUntil         time.Time // optional
	IsPinned          bool      // optional
	Alias             string    // optional, likely
	UnreadCount       uint32    // optional
	Extra             string    // optional, likely

	Deleted bool // optional
}

// List returns the specified models from database by params
func (c *chatConversationMember) List(ctx context.Context, params *ListChatConversationMemberParams) (list []*model.ChatConversationMember, total int64, err error) {
	tx := c.DB().WithContext(ctx).Table(model.TableNameChatConversationMember).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.ConversationId).IsZero(), "conversation_id = ?", params.ConversationId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.UserUuid).IsZero(), "user_uuid like ?", "%"+params.UserUuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Role).IsZero(), "role = ?", params.Role)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.LastReadMessageId).IsZero(), "last_read_message_id = ?", params.LastReadMessageId)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.LastReadAt).IsZero(), "last_read_at = ?", params.LastReadAt)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.MuteUntil).IsZero(), "mute_until = ?", params.MuteUntil)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.IsPinned).IsZero(), "is_pinned = ?", params.IsPinned)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Alias).IsZero(), "alias like ?", "%"+params.Alias+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.UnreadCount).IsZero(), "unread_count = ?", params.UnreadCount)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Extra).IsZero(), "extra like ?", "%"+params.Extra+"%")).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (c *chatConversationMember) Update(ctx context.Context, model *model.ChatConversationMember, cols ...string) error {
	return c.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (c *chatConversationMember) DeleteByID(ctx context.Context, id uint32) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatConversationMember).
		Delete(&model.ChatConversationMember{}, id).Error
}

func (c *chatConversationMember) Destroy(ctx context.Context, id uint32) error {
	return c.DB().WithContext(ctx).Table(model.TableNameChatConversationMember).
		Unscoped().
		Delete(&model.ChatConversationMember{}, id).Error
}
