// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (a *auth) DB() *gorm.DB {
	return a.authDo.DO.UnderlyingDB()
}

func (a *auth) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.Auth, err error) {
	err = a.DB().WithContext(ctx).Table(model.TableNameAuth).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (a *auth) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.Auth, err error) {
	err = a.DB().WithContext(ctx).Table(model.TableNameAuth).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListAuthParams represents the params to list models
type ListAuthParams struct {
	dbgen.Pager

	Account  string // optional, likely
	NickName string // optional, likely
	Password string // optional, likely

	Deleted bool // optional
}

// List returns the specified models from database by params
func (a *auth) List(ctx context.Context, params *ListAuthParams) (list []*model.Auth, total int64, err error) {
	tx := a.DB().WithContext(ctx).Table(model.TableNameAuth).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Account).IsZero(), "account like ?", "%"+params.Account+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.NickName).IsZero(), "nick_name like ?", "%"+params.NickName+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Password).IsZero(), "password like ?", "%"+params.Password+"%")).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (a *auth) Update(ctx context.Context, model *model.Auth, cols ...string) error {
	return a.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (a *auth) DeleteByID(ctx context.Context, id uint32) error {
	return a.DB().WithContext(ctx).Table(model.TableNameAuth).
		Delete(&model.Auth{}, id).Error
}

func (a *auth) Destroy(ctx context.Context, id uint32) error {
	return a.DB().WithContext(ctx).Table(model.TableNameAuth).
		Unscoped().
		Delete(&model.Auth{}, id).Error
}
