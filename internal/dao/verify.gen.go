// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newVerify(db *gorm.DB, opts ...gen.DOOption) verify {
	_verify := verify{}

	_verify.verifyDo.UseDB(db, opts...)
	_verify.verifyDo.UseModel(&model.Verify{})

	tableName := _verify.verifyDo.TableName()
	_verify.ALL = field.NewAsterisk(tableName)
	_verify.ID = field.NewUint32(tableName, "id")
	_verify.SendID = field.NewUint32(tableName, "send_id")
	_verify.RevID = field.NewUint32(tableName, "rev_id")
	_verify.Status = field.NewUint8(tableName, "status")
	_verify.CreatedAt = field.NewTime(tableName, "created_at")
	_verify.UpdatedAt = field.NewTime(tableName, "updated_at")
	_verify.DeletedAt = field.NewField(tableName, "deleted_at")

	_verify.fillFieldMap()

	return _verify
}

// verify 验证表
type verify struct {
	verifyDo verifyDo

	ALL       field.Asterisk
	ID        field.Uint32 // 主键id
	SendID    field.Uint32 // 发送者id
	RevID     field.Uint32 // 接受者统称id
	Status    field.Uint8  // 处理状态：1待处理，2成功，3失败
	CreatedAt field.Time   // 数据插入时间
	UpdatedAt field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (v verify) Table(newTableName string) *verify {
	v.verifyDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v verify) As(alias string) *verify {
	v.verifyDo.DO = *(v.verifyDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *verify) updateTableName(table string) *verify {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint32(table, "id")
	v.SendID = field.NewUint32(table, "send_id")
	v.RevID = field.NewUint32(table, "rev_id")
	v.Status = field.NewUint8(table, "status")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *verify) WithContext(ctx context.Context) *verifyDo { return v.verifyDo.WithContext(ctx) }

func (v verify) TableName() string { return v.verifyDo.TableName() }

func (v verify) Alias() string { return v.verifyDo.Alias() }

func (v verify) Columns(cols ...field.Expr) gen.Columns { return v.verifyDo.Columns(cols...) }

func (v *verify) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *verify) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["send_id"] = v.SendID
	v.fieldMap["rev_id"] = v.RevID
	v.fieldMap["status"] = v.Status
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v verify) clone(db *gorm.DB) verify {
	v.verifyDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v verify) replaceDB(db *gorm.DB) verify {
	v.verifyDo.ReplaceDB(db)
	return v
}

type verifyDo struct{ gen.DO }

func (v verifyDo) Debug() *verifyDo {
	return v.withDO(v.DO.Debug())
}

func (v verifyDo) WithContext(ctx context.Context) *verifyDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v verifyDo) ReadDB() *verifyDo {
	return v.Clauses(dbresolver.Read)
}

func (v verifyDo) WriteDB() *verifyDo {
	return v.Clauses(dbresolver.Write)
}

func (v verifyDo) Session(config *gorm.Session) *verifyDo {
	return v.withDO(v.DO.Session(config))
}

func (v verifyDo) Clauses(conds ...clause.Expression) *verifyDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v verifyDo) Returning(value interface{}, columns ...string) *verifyDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v verifyDo) Not(conds ...gen.Condition) *verifyDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v verifyDo) Or(conds ...gen.Condition) *verifyDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v verifyDo) Select(conds ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v verifyDo) Where(conds ...gen.Condition) *verifyDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v verifyDo) Order(conds ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v verifyDo) Distinct(cols ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v verifyDo) Omit(cols ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v verifyDo) Join(table schema.Tabler, on ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v verifyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *verifyDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v verifyDo) RightJoin(table schema.Tabler, on ...field.Expr) *verifyDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v verifyDo) Group(cols ...field.Expr) *verifyDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v verifyDo) Having(conds ...gen.Condition) *verifyDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v verifyDo) Limit(limit int) *verifyDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v verifyDo) Offset(offset int) *verifyDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v verifyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *verifyDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v verifyDo) Unscoped() *verifyDo {
	return v.withDO(v.DO.Unscoped())
}

func (v verifyDo) Create(values ...*model.Verify) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v verifyDo) CreateInBatches(values []*model.Verify, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v verifyDo) Save(values ...*model.Verify) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v verifyDo) First() (*model.Verify, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verify), nil
	}
}

func (v verifyDo) Take() (*model.Verify, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verify), nil
	}
}

func (v verifyDo) Last() (*model.Verify, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verify), nil
	}
}

func (v verifyDo) Find() ([]*model.Verify, error) {
	result, err := v.DO.Find()
	return result.([]*model.Verify), err
}

func (v verifyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Verify, err error) {
	buf := make([]*model.Verify, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v verifyDo) FindInBatches(result *[]*model.Verify, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v verifyDo) Attrs(attrs ...field.AssignExpr) *verifyDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v verifyDo) Assign(attrs ...field.AssignExpr) *verifyDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v verifyDo) Joins(fields ...field.RelationField) *verifyDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v verifyDo) Preload(fields ...field.RelationField) *verifyDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v verifyDo) FirstOrInit() (*model.Verify, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verify), nil
	}
}

func (v verifyDo) FirstOrCreate() (*model.Verify, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verify), nil
	}
}

func (v verifyDo) FindByPage(offset int, limit int) (result []*model.Verify, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v verifyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v verifyDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v verifyDo) Delete(models ...*model.Verify) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *verifyDo) withDO(do gen.Dao) *verifyDo {
	v.DO = *do.(*gen.DO)
	return v
}
