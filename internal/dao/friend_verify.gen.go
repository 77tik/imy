// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newFriendVerify(db *gorm.DB, opts ...gen.DOOption) friendVerify {
	_friendVerify := friendVerify{}

	_friendVerify.friendVerifyDo.UseDB(db, opts...)
	_friendVerify.friendVerifyDo.UseModel(&model.FriendVerify{})

	tableName := _friendVerify.friendVerifyDo.TableName()
	_friendVerify.ALL = field.NewAsterisk(tableName)
	_friendVerify.ID = field.NewUint32(tableName, "id")
	_friendVerify.SendUUID = field.NewString(tableName, "send_uuid")
	_friendVerify.RevUUID = field.NewString(tableName, "rev_uuid")
	_friendVerify.SendStatus = field.NewInt8(tableName, "send_status")
	_friendVerify.RevStatus = field.NewInt8(tableName, "rev_status")
	_friendVerify.Message = field.NewString(tableName, "message")
	_friendVerify.Source = field.NewInt8(tableName, "source")
	_friendVerify.CreatedAt = field.NewTime(tableName, "created_at")
	_friendVerify.UpdatedAt = field.NewTime(tableName, "updated_at")
	_friendVerify.DeletedAt = field.NewField(tableName, "deleted_at")

	_friendVerify.fillFieldMap()

	return _friendVerify
}

// friendVerify 好友验证表
type friendVerify struct {
	friendVerifyDo friendVerifyDo

	ALL        field.Asterisk
	ID         field.Uint32 // 主键id
	SendUUID   field.String // 发起方
	RevUUID    field.String // 接收者
	SendStatus field.Int8   // 发送方状态默认1表示待处理，后续还有拒绝，忽略，通过
	RevStatus  field.Int8   // 接收方状态
	Message    field.String // 好友验证消息
	Source     field.Int8   // 关系来源比如发送方从群聊中获得，还是搜索获得，默认1代表搜索
	CreatedAt  field.Time   // 数据插入时间
	UpdatedAt  field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt  field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (f friendVerify) Table(newTableName string) *friendVerify {
	f.friendVerifyDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendVerify) As(alias string) *friendVerify {
	f.friendVerifyDo.DO = *(f.friendVerifyDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendVerify) updateTableName(table string) *friendVerify {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint32(table, "id")
	f.SendUUID = field.NewString(table, "send_uuid")
	f.RevUUID = field.NewString(table, "rev_uuid")
	f.SendStatus = field.NewInt8(table, "send_status")
	f.RevStatus = field.NewInt8(table, "rev_status")
	f.Message = field.NewString(table, "message")
	f.Source = field.NewInt8(table, "source")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *friendVerify) WithContext(ctx context.Context) *friendVerifyDo {
	return f.friendVerifyDo.WithContext(ctx)
}

func (f friendVerify) TableName() string { return f.friendVerifyDo.TableName() }

func (f friendVerify) Alias() string { return f.friendVerifyDo.Alias() }

func (f friendVerify) Columns(cols ...field.Expr) gen.Columns {
	return f.friendVerifyDo.Columns(cols...)
}

func (f *friendVerify) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendVerify) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["send_uuid"] = f.SendUUID
	f.fieldMap["rev_uuid"] = f.RevUUID
	f.fieldMap["send_status"] = f.SendStatus
	f.fieldMap["rev_status"] = f.RevStatus
	f.fieldMap["message"] = f.Message
	f.fieldMap["source"] = f.Source
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f friendVerify) clone(db *gorm.DB) friendVerify {
	f.friendVerifyDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendVerify) replaceDB(db *gorm.DB) friendVerify {
	f.friendVerifyDo.ReplaceDB(db)
	return f
}

type friendVerifyDo struct{ gen.DO }

func (f friendVerifyDo) Debug() *friendVerifyDo {
	return f.withDO(f.DO.Debug())
}

func (f friendVerifyDo) WithContext(ctx context.Context) *friendVerifyDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendVerifyDo) ReadDB() *friendVerifyDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendVerifyDo) WriteDB() *friendVerifyDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendVerifyDo) Session(config *gorm.Session) *friendVerifyDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendVerifyDo) Clauses(conds ...clause.Expression) *friendVerifyDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendVerifyDo) Returning(value interface{}, columns ...string) *friendVerifyDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendVerifyDo) Not(conds ...gen.Condition) *friendVerifyDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendVerifyDo) Or(conds ...gen.Condition) *friendVerifyDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendVerifyDo) Select(conds ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendVerifyDo) Where(conds ...gen.Condition) *friendVerifyDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendVerifyDo) Order(conds ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendVerifyDo) Distinct(cols ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendVerifyDo) Omit(cols ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendVerifyDo) Join(table schema.Tabler, on ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendVerifyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendVerifyDo) RightJoin(table schema.Tabler, on ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendVerifyDo) Group(cols ...field.Expr) *friendVerifyDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendVerifyDo) Having(conds ...gen.Condition) *friendVerifyDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendVerifyDo) Limit(limit int) *friendVerifyDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendVerifyDo) Offset(offset int) *friendVerifyDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendVerifyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendVerifyDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendVerifyDo) Unscoped() *friendVerifyDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendVerifyDo) Create(values ...*model.FriendVerify) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendVerifyDo) CreateInBatches(values []*model.FriendVerify, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendVerifyDo) Save(values ...*model.FriendVerify) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendVerifyDo) First() (*model.FriendVerify, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendVerify), nil
	}
}

func (f friendVerifyDo) Take() (*model.FriendVerify, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendVerify), nil
	}
}

func (f friendVerifyDo) Last() (*model.FriendVerify, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendVerify), nil
	}
}

func (f friendVerifyDo) Find() ([]*model.FriendVerify, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendVerify), err
}

func (f friendVerifyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendVerify, err error) {
	buf := make([]*model.FriendVerify, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendVerifyDo) FindInBatches(result *[]*model.FriendVerify, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendVerifyDo) Attrs(attrs ...field.AssignExpr) *friendVerifyDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendVerifyDo) Assign(attrs ...field.AssignExpr) *friendVerifyDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendVerifyDo) Joins(fields ...field.RelationField) *friendVerifyDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendVerifyDo) Preload(fields ...field.RelationField) *friendVerifyDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendVerifyDo) FirstOrInit() (*model.FriendVerify, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendVerify), nil
	}
}

func (f friendVerifyDo) FirstOrCreate() (*model.FriendVerify, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendVerify), nil
	}
}

func (f friendVerifyDo) FindByPage(offset int, limit int) (result []*model.FriendVerify, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendVerifyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendVerifyDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendVerifyDo) Delete(models ...*model.FriendVerify) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendVerifyDo) withDO(do gen.Dao) *friendVerifyDo {
	f.DO = *do.(*gen.DO)
	return f
}
