// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newChatConversation(db *gorm.DB, opts ...gen.DOOption) chatConversation {
	_chatConversation := chatConversation{}

	_chatConversation.chatConversationDo.UseDB(db, opts...)
	_chatConversation.chatConversationDo.UseModel(&model.ChatConversation{})

	tableName := _chatConversation.chatConversationDo.TableName()
	_chatConversation.ALL = field.NewAsterisk(tableName)
	_chatConversation.ID = field.NewUint32(tableName, "id")
	_chatConversation.Type = field.NewInt8(tableName, "type")
	_chatConversation.PrivateKey = field.NewString(tableName, "private_key")
	_chatConversation.CreateUUID = field.NewString(tableName, "create_uuid")
	_chatConversation.Name = field.NewString(tableName, "name")
	_chatConversation.MemberCount = field.NewUint32(tableName, "member_count")
	_chatConversation.LastMessageID = field.NewUint64(tableName, "last_message_id")
	_chatConversation.Avatar = field.NewString(tableName, "avatar")
	_chatConversation.Extra = field.NewString(tableName, "extra")
	_chatConversation.CreatedAt = field.NewTime(tableName, "created_at")
	_chatConversation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chatConversation.DeletedAt = field.NewField(tableName, "deleted_at")

	_chatConversation.fillFieldMap()

	return _chatConversation
}

// chatConversation 聊天会话表
type chatConversation struct {
	chatConversationDo chatConversationDo

	ALL           field.Asterisk
	ID            field.Uint32 // 主键id
	Type          field.Int8   // 会话类型，1表示单聊，2表示群聊
	PrivateKey    field.String // 会话标识
	CreateUUID    field.String // 创建方
	Name          field.String // 会话名称,群聊使用,单聊可以为空
	MemberCount   field.Uint32 // 成员数
	LastMessageID field.Uint64 // 最后一条消息的id，用于展示
	Avatar        field.String // 会话头像（群聊）
	Extra         field.String // 扩展信息（置顶、公告等）
	CreatedAt     field.Time   // 数据插入时间
	UpdatedAt     field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt     field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (c chatConversation) Table(newTableName string) *chatConversation {
	c.chatConversationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatConversation) As(alias string) *chatConversation {
	c.chatConversationDo.DO = *(c.chatConversationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatConversation) updateTableName(table string) *chatConversation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Type = field.NewInt8(table, "type")
	c.PrivateKey = field.NewString(table, "private_key")
	c.CreateUUID = field.NewString(table, "create_uuid")
	c.Name = field.NewString(table, "name")
	c.MemberCount = field.NewUint32(table, "member_count")
	c.LastMessageID = field.NewUint64(table, "last_message_id")
	c.Avatar = field.NewString(table, "avatar")
	c.Extra = field.NewString(table, "extra")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chatConversation) WithContext(ctx context.Context) *chatConversationDo {
	return c.chatConversationDo.WithContext(ctx)
}

func (c chatConversation) TableName() string { return c.chatConversationDo.TableName() }

func (c chatConversation) Alias() string { return c.chatConversationDo.Alias() }

func (c chatConversation) Columns(cols ...field.Expr) gen.Columns {
	return c.chatConversationDo.Columns(cols...)
}

func (c *chatConversation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatConversation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["type"] = c.Type
	c.fieldMap["private_key"] = c.PrivateKey
	c.fieldMap["create_uuid"] = c.CreateUUID
	c.fieldMap["name"] = c.Name
	c.fieldMap["member_count"] = c.MemberCount
	c.fieldMap["last_message_id"] = c.LastMessageID
	c.fieldMap["avatar"] = c.Avatar
	c.fieldMap["extra"] = c.Extra
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chatConversation) clone(db *gorm.DB) chatConversation {
	c.chatConversationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatConversation) replaceDB(db *gorm.DB) chatConversation {
	c.chatConversationDo.ReplaceDB(db)
	return c
}

type chatConversationDo struct{ gen.DO }

func (c chatConversationDo) Debug() *chatConversationDo {
	return c.withDO(c.DO.Debug())
}

func (c chatConversationDo) WithContext(ctx context.Context) *chatConversationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatConversationDo) ReadDB() *chatConversationDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatConversationDo) WriteDB() *chatConversationDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatConversationDo) Session(config *gorm.Session) *chatConversationDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatConversationDo) Clauses(conds ...clause.Expression) *chatConversationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatConversationDo) Returning(value interface{}, columns ...string) *chatConversationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatConversationDo) Not(conds ...gen.Condition) *chatConversationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatConversationDo) Or(conds ...gen.Condition) *chatConversationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatConversationDo) Select(conds ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatConversationDo) Where(conds ...gen.Condition) *chatConversationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatConversationDo) Order(conds ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatConversationDo) Distinct(cols ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatConversationDo) Omit(cols ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatConversationDo) Join(table schema.Tabler, on ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatConversationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatConversationDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatConversationDo) Group(cols ...field.Expr) *chatConversationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatConversationDo) Having(conds ...gen.Condition) *chatConversationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatConversationDo) Limit(limit int) *chatConversationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatConversationDo) Offset(offset int) *chatConversationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatConversationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatConversationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatConversationDo) Unscoped() *chatConversationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatConversationDo) Create(values ...*model.ChatConversation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatConversationDo) CreateInBatches(values []*model.ChatConversation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatConversationDo) Save(values ...*model.ChatConversation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatConversationDo) First() (*model.ChatConversation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversation), nil
	}
}

func (c chatConversationDo) Take() (*model.ChatConversation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversation), nil
	}
}

func (c chatConversationDo) Last() (*model.ChatConversation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversation), nil
	}
}

func (c chatConversationDo) Find() ([]*model.ChatConversation, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatConversation), err
}

func (c chatConversationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatConversation, err error) {
	buf := make([]*model.ChatConversation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatConversationDo) FindInBatches(result *[]*model.ChatConversation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatConversationDo) Attrs(attrs ...field.AssignExpr) *chatConversationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatConversationDo) Assign(attrs ...field.AssignExpr) *chatConversationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatConversationDo) Joins(fields ...field.RelationField) *chatConversationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatConversationDo) Preload(fields ...field.RelationField) *chatConversationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatConversationDo) FirstOrInit() (*model.ChatConversation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversation), nil
	}
}

func (c chatConversationDo) FirstOrCreate() (*model.ChatConversation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatConversation), nil
	}
}

func (c chatConversationDo) FindByPage(offset int, limit int) (result []*model.ChatConversation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatConversationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatConversationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatConversationDo) Delete(models ...*model.ChatConversation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatConversationDo) withDO(do gen.Dao) *chatConversationDo {
	c.DO = *do.(*gen.DO)
	return c
}
