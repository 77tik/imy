// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (f *friend) DB() *gorm.DB {
	return f.friendDo.DO.UnderlyingDB()
}

func (f *friend) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.Friend, err error) {
	err = f.DB().WithContext(ctx).Table(model.TableNameFriend).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (f *friend) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.Friend, err error) {
	err = f.DB().WithContext(ctx).Table(model.TableNameFriend).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListFriendParams represents the params to list models
type ListFriendParams struct {
	dbgen.Pager

	SendUuid   string // optional, likely
	RevUuid    string // optional, likely
	SendNotice string // optional, likely
	RevNotice  string // optional, likely
	Source     int8   // optional

	Deleted bool // optional
}

// List returns the specified models from database by params
func (f *friend) List(ctx context.Context, params *ListFriendParams) (list []*model.Friend, total int64, err error) {
	tx := f.DB().WithContext(ctx).Table(model.TableNameFriend).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.SendUuid).IsZero(), "send_uuid like ?", "%"+params.SendUuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.RevUuid).IsZero(), "rev_uuid like ?", "%"+params.RevUuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.SendNotice).IsZero(), "send_notice like ?", "%"+params.SendNotice+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.RevNotice).IsZero(), "rev_notice like ?", "%"+params.RevNotice+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Source).IsZero(), "source = ?", params.Source)).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (f *friend) Update(ctx context.Context, model *model.Friend, cols ...string) error {
	return f.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (f *friend) DeleteByID(ctx context.Context, id uint32) error {
	return f.DB().WithContext(ctx).Table(model.TableNameFriend).
		Delete(&model.Friend{}, id).Error
}

func (f *friend) Destroy(ctx context.Context, id uint32) error {
	return f.DB().WithContext(ctx).Table(model.TableNameFriend).
		Unscoped().
		Delete(&model.Friend{}, id).Error
}
