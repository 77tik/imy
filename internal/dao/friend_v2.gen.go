// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newFriendV2(db *gorm.DB, opts ...gen.DOOption) friendV2 {
	_friendV2 := friendV2{}

	_friendV2.friendV2Do.UseDB(db, opts...)
	_friendV2.friendV2Do.UseModel(&model.FriendV2{})

	tableName := _friendV2.friendV2Do.TableName()
	_friendV2.ALL = field.NewAsterisk(tableName)
	_friendV2.ID = field.NewUint32(tableName, "id")
	_friendV2.SendID = field.NewUint32(tableName, "send_id")
	_friendV2.RevID = field.NewUint32(tableName, "rev_id")
	_friendV2.CreatedAt = field.NewTime(tableName, "created_at")
	_friendV2.UpdatedAt = field.NewTime(tableName, "updated_at")
	_friendV2.DeletedAt = field.NewField(tableName, "deleted_at")

	_friendV2.fillFieldMap()

	return _friendV2
}

// friendV2 好友表v2
type friendV2 struct {
	friendV2Do friendV2Do

	ALL       field.Asterisk
	ID        field.Uint32 // 主键id
	SendID    field.Uint32 // 发送者id
	RevID     field.Uint32 // 接受者统称id
	CreatedAt field.Time   // 数据插入时间
	UpdatedAt field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (f friendV2) Table(newTableName string) *friendV2 {
	f.friendV2Do.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendV2) As(alias string) *friendV2 {
	f.friendV2Do.DO = *(f.friendV2Do.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendV2) updateTableName(table string) *friendV2 {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint32(table, "id")
	f.SendID = field.NewUint32(table, "send_id")
	f.RevID = field.NewUint32(table, "rev_id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *friendV2) WithContext(ctx context.Context) *friendV2Do { return f.friendV2Do.WithContext(ctx) }

func (f friendV2) TableName() string { return f.friendV2Do.TableName() }

func (f friendV2) Alias() string { return f.friendV2Do.Alias() }

func (f friendV2) Columns(cols ...field.Expr) gen.Columns { return f.friendV2Do.Columns(cols...) }

func (f *friendV2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendV2) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["send_id"] = f.SendID
	f.fieldMap["rev_id"] = f.RevID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f friendV2) clone(db *gorm.DB) friendV2 {
	f.friendV2Do.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendV2) replaceDB(db *gorm.DB) friendV2 {
	f.friendV2Do.ReplaceDB(db)
	return f
}

type friendV2Do struct{ gen.DO }

func (f friendV2Do) Debug() *friendV2Do {
	return f.withDO(f.DO.Debug())
}

func (f friendV2Do) WithContext(ctx context.Context) *friendV2Do {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendV2Do) ReadDB() *friendV2Do {
	return f.Clauses(dbresolver.Read)
}

func (f friendV2Do) WriteDB() *friendV2Do {
	return f.Clauses(dbresolver.Write)
}

func (f friendV2Do) Session(config *gorm.Session) *friendV2Do {
	return f.withDO(f.DO.Session(config))
}

func (f friendV2Do) Clauses(conds ...clause.Expression) *friendV2Do {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendV2Do) Returning(value interface{}, columns ...string) *friendV2Do {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendV2Do) Not(conds ...gen.Condition) *friendV2Do {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendV2Do) Or(conds ...gen.Condition) *friendV2Do {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendV2Do) Select(conds ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendV2Do) Where(conds ...gen.Condition) *friendV2Do {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendV2Do) Order(conds ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendV2Do) Distinct(cols ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendV2Do) Omit(cols ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendV2Do) Join(table schema.Tabler, on ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendV2Do) LeftJoin(table schema.Tabler, on ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendV2Do) RightJoin(table schema.Tabler, on ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendV2Do) Group(cols ...field.Expr) *friendV2Do {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendV2Do) Having(conds ...gen.Condition) *friendV2Do {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendV2Do) Limit(limit int) *friendV2Do {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendV2Do) Offset(offset int) *friendV2Do {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendV2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendV2Do {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendV2Do) Unscoped() *friendV2Do {
	return f.withDO(f.DO.Unscoped())
}

func (f friendV2Do) Create(values ...*model.FriendV2) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendV2Do) CreateInBatches(values []*model.FriendV2, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendV2Do) Save(values ...*model.FriendV2) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendV2Do) First() (*model.FriendV2, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendV2), nil
	}
}

func (f friendV2Do) Take() (*model.FriendV2, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendV2), nil
	}
}

func (f friendV2Do) Last() (*model.FriendV2, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendV2), nil
	}
}

func (f friendV2Do) Find() ([]*model.FriendV2, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendV2), err
}

func (f friendV2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendV2, err error) {
	buf := make([]*model.FriendV2, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendV2Do) FindInBatches(result *[]*model.FriendV2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendV2Do) Attrs(attrs ...field.AssignExpr) *friendV2Do {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendV2Do) Assign(attrs ...field.AssignExpr) *friendV2Do {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendV2Do) Joins(fields ...field.RelationField) *friendV2Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendV2Do) Preload(fields ...field.RelationField) *friendV2Do {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendV2Do) FirstOrInit() (*model.FriendV2, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendV2), nil
	}
}

func (f friendV2Do) FirstOrCreate() (*model.FriendV2, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendV2), nil
	}
}

func (f friendV2Do) FindByPage(offset int, limit int) (result []*model.FriendV2, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendV2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendV2Do) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendV2Do) Delete(models ...*model.FriendV2) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendV2Do) withDO(do gen.Dao) *friendV2Do {
	f.DO = *do.(*gen.DO)
	return f
}
