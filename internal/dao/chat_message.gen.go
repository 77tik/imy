// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"imy/internal/dao/model"
)

func newChatMessage(db *gorm.DB, opts ...gen.DOOption) chatMessage {
	_chatMessage := chatMessage{}

	_chatMessage.chatMessageDo.UseDB(db, opts...)
	_chatMessage.chatMessageDo.UseModel(&model.ChatMessage{})

	tableName := _chatMessage.chatMessageDo.TableName()
	_chatMessage.ALL = field.NewAsterisk(tableName)
	_chatMessage.ID = field.NewUint64(tableName, "id")
	_chatMessage.ConversationID = field.NewUint32(tableName, "conversation_id")
	_chatMessage.SendUUID = field.NewString(tableName, "send_uuid")
	_chatMessage.ClientMsgID = field.NewString(tableName, "client_msg_id")
	_chatMessage.MsgType = field.NewInt8(tableName, "msg_type")
	_chatMessage.Content = field.NewString(tableName, "content")
	_chatMessage.ContentExtra = field.NewString(tableName, "content_extra")
	_chatMessage.ReplyToMessageID = field.NewUint64(tableName, "reply_to_message_id")
	_chatMessage.MentionedUuids = field.NewString(tableName, "mentioned_uuids")
	_chatMessage.IsSystem = field.NewBool(tableName, "is_system")
	_chatMessage.IsRevoked = field.NewBool(tableName, "is_revoked")
	_chatMessage.RevokedAt = field.NewTime(tableName, "revoked_at")
	_chatMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_chatMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chatMessage.DeletedAt = field.NewField(tableName, "deleted_at")

	_chatMessage.fillFieldMap()

	return _chatMessage
}

// chatMessage 聊天信息表
type chatMessage struct {
	chatMessageDo chatMessageDo

	ALL              field.Asterisk
	ID               field.Uint64 // 主键id
	ConversationID   field.Uint32 // 会话id
	SendUUID         field.String // 发送方uuid
	ClientMsgID      field.String // 客户端幂等ID
	MsgType          field.Int8   // 消息类型：1文本、2图片、3语音、4视频、5文件、6系统
	Content          field.String // 消息内容（文本或JSON）
	ContentExtra     field.String // 内容扩展（图片宽高、文件大小等）
	ReplyToMessageID field.Uint64 // 引用/回复的消息ID
	MentionedUuids   field.String // @用户uuid列表（逗号分隔或JSON）
	IsSystem         field.Bool   // 是否系统消息
	IsRevoked        field.Bool   // 是否撤回
	RevokedAt        field.Time   // 撤回时间
	CreatedAt        field.Time   // 数据插入时间
	UpdatedAt        field.Time   // 数据更新时间,最后一次登陆时间
	DeletedAt        field.Field  // 删除标记

	fieldMap map[string]field.Expr
}

func (c chatMessage) Table(newTableName string) *chatMessage {
	c.chatMessageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatMessage) As(alias string) *chatMessage {
	c.chatMessageDo.DO = *(c.chatMessageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatMessage) updateTableName(table string) *chatMessage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.ConversationID = field.NewUint32(table, "conversation_id")
	c.SendUUID = field.NewString(table, "send_uuid")
	c.ClientMsgID = field.NewString(table, "client_msg_id")
	c.MsgType = field.NewInt8(table, "msg_type")
	c.Content = field.NewString(table, "content")
	c.ContentExtra = field.NewString(table, "content_extra")
	c.ReplyToMessageID = field.NewUint64(table, "reply_to_message_id")
	c.MentionedUuids = field.NewString(table, "mentioned_uuids")
	c.IsSystem = field.NewBool(table, "is_system")
	c.IsRevoked = field.NewBool(table, "is_revoked")
	c.RevokedAt = field.NewTime(table, "revoked_at")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chatMessage) WithContext(ctx context.Context) *chatMessageDo {
	return c.chatMessageDo.WithContext(ctx)
}

func (c chatMessage) TableName() string { return c.chatMessageDo.TableName() }

func (c chatMessage) Alias() string { return c.chatMessageDo.Alias() }

func (c chatMessage) Columns(cols ...field.Expr) gen.Columns { return c.chatMessageDo.Columns(cols...) }

func (c *chatMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatMessage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["conversation_id"] = c.ConversationID
	c.fieldMap["send_uuid"] = c.SendUUID
	c.fieldMap["client_msg_id"] = c.ClientMsgID
	c.fieldMap["msg_type"] = c.MsgType
	c.fieldMap["content"] = c.Content
	c.fieldMap["content_extra"] = c.ContentExtra
	c.fieldMap["reply_to_message_id"] = c.ReplyToMessageID
	c.fieldMap["mentioned_uuids"] = c.MentionedUuids
	c.fieldMap["is_system"] = c.IsSystem
	c.fieldMap["is_revoked"] = c.IsRevoked
	c.fieldMap["revoked_at"] = c.RevokedAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chatMessage) clone(db *gorm.DB) chatMessage {
	c.chatMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatMessage) replaceDB(db *gorm.DB) chatMessage {
	c.chatMessageDo.ReplaceDB(db)
	return c
}

type chatMessageDo struct{ gen.DO }

func (c chatMessageDo) Debug() *chatMessageDo {
	return c.withDO(c.DO.Debug())
}

func (c chatMessageDo) WithContext(ctx context.Context) *chatMessageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatMessageDo) ReadDB() *chatMessageDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatMessageDo) WriteDB() *chatMessageDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatMessageDo) Session(config *gorm.Session) *chatMessageDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatMessageDo) Clauses(conds ...clause.Expression) *chatMessageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatMessageDo) Returning(value interface{}, columns ...string) *chatMessageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatMessageDo) Not(conds ...gen.Condition) *chatMessageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatMessageDo) Or(conds ...gen.Condition) *chatMessageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatMessageDo) Select(conds ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatMessageDo) Where(conds ...gen.Condition) *chatMessageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatMessageDo) Order(conds ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatMessageDo) Distinct(cols ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatMessageDo) Omit(cols ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatMessageDo) Join(table schema.Tabler, on ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatMessageDo) Group(cols ...field.Expr) *chatMessageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatMessageDo) Having(conds ...gen.Condition) *chatMessageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatMessageDo) Limit(limit int) *chatMessageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatMessageDo) Offset(offset int) *chatMessageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatMessageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatMessageDo) Unscoped() *chatMessageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatMessageDo) Create(values ...*model.ChatMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatMessageDo) CreateInBatches(values []*model.ChatMessage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatMessageDo) Save(values ...*model.ChatMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatMessageDo) First() (*model.ChatMessage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Take() (*model.ChatMessage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Last() (*model.ChatMessage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Find() ([]*model.ChatMessage, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatMessage), err
}

func (c chatMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatMessage, err error) {
	buf := make([]*model.ChatMessage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatMessageDo) FindInBatches(result *[]*model.ChatMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatMessageDo) Attrs(attrs ...field.AssignExpr) *chatMessageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatMessageDo) Assign(attrs ...field.AssignExpr) *chatMessageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatMessageDo) Joins(fields ...field.RelationField) *chatMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatMessageDo) Preload(fields ...field.RelationField) *chatMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatMessageDo) FirstOrInit() (*model.ChatMessage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) FirstOrCreate() (*model.ChatMessage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) FindByPage(offset int, limit int) (result []*model.ChatMessage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatMessageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatMessageDo) Delete(models ...*model.ChatMessage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatMessageDo) withDO(do gen.Dao) *chatMessageDo {
	c.DO = *do.(*gen.DO)
	return c
}
