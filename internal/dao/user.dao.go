// Code generated by go-exp. DO NOT EDIT.

package dao

import (
	"context"
	"reflect"

	"imy/internal/dao/model"

	"imy/pkg/dbgen"

	"gorm.io/gorm"
)

func (u *user) DB() *gorm.DB {
	return u.userDo.DO.UnderlyingDB()
}

func (u *user) Get(ctx context.Context, id uint32, withDeleted ...bool) (result *model.User, err error) {
	err = u.DB().WithContext(ctx).Table(model.TableNameUser).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id = ?", id).
		First(&result).
		Error
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (u *user) GetList(ctx context.Context, id []uint32, withDeleted ...bool) (list []*model.User, err error) {
	err = u.DB().WithContext(ctx).Table(model.TableNameUser).
		Scopes(dbgen.WithDeletedList(withDeleted)).
		Where("id IN ?", id).
		Find(&list).
		Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// ListUserParams represents the params to list models
type ListUserParams struct {
	dbgen.Pager

	Uuid        string // optional, likely
	NickName    string // optional, likely
	Password    string // optional, likely
	Email       string // optional, likely
	FileName    string // optional, likely
	Abstract    string // optional, likely
	Phone       string // optional, likely
	Status      int8   // optional
	Gender      int8   // optional
	LastLoginIp string // optional, likely
	Source      int8   // optional

	Deleted bool // optional
}

// List returns the specified models from database by params
func (u *user) List(ctx context.Context, params *ListUserParams) (list []*model.User, total int64, err error) {
	tx := u.DB().WithContext(ctx).Table(model.TableNameUser).
		Scopes(dbgen.WithDeleted(params.Deleted)).
		Scopes(dbgen.Paginate(params.Pager)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Uuid).IsZero(), "uuid like ?", "%"+params.Uuid+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.NickName).IsZero(), "nick_name like ?", "%"+params.NickName+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Password).IsZero(), "password like ?", "%"+params.Password+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Email).IsZero(), "email like ?", "%"+params.Email+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.FileName).IsZero(), "file_name like ?", "%"+params.FileName+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Abstract).IsZero(), "abstract like ?", "%"+params.Abstract+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Phone).IsZero(), "phone like ?", "%"+params.Phone+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Status).IsZero(), "status = ?", params.Status)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Gender).IsZero(), "gender = ?", params.Gender)).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.LastLoginIp).IsZero(), "last_login_ip like ?", "%"+params.LastLoginIp+"%")).
		Scopes(dbgen.Cond(!reflect.ValueOf(params.Source).IsZero(), "source = ?", params.Source)).
		Order("id desc")

	total, err = dbgen.FindAndCountTransaction(tx, &list)
	if err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (u *user) Update(ctx context.Context, model *model.User, cols ...string) error {
	return u.DB().WithContext(ctx).
		Model(model).
		Select(cols).
		Updates(model).
		Error
}

func (u *user) DeleteByID(ctx context.Context, id uint32) error {
	return u.DB().WithContext(ctx).Table(model.TableNameUser).
		Delete(&model.User{}, id).Error
}

func (u *user) Destroy(ctx context.Context, id uint32) error {
	return u.DB().WithContext(ctx).Table(model.TableNameUser).
		Unscoped().
		Delete(&model.User{}, id).Error
}
