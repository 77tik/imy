// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package types

type AddFriendReq struct {
	UUID  string `json:"uuid"`
	RevId string `json:"revId"`
}

type AddMembersReq struct {
	UUID           string   `head:"uuid"`
	ConversationId uint32   `json:"conversationId"`
	MemberUUIDs    []string `json:"memberUuids"`
}

type AuthCheckReq struct {
	Token     string `head:"token"`
	ValidPath string `head:"validPath"`
}

type AuthCheckResp struct {
	UUID string `json:"uuid"`
}

type ConversationInfo struct {
	ConversationId uint32 `json:"conversationId"`
	Type           uint32 `json:"type"` // 1:单聊 2:群聊
	PrivateKey     string `json:"privateKey"`
	Name           string `json:"name"`
	MemberCount    uint32 `json:"memberCount"`
	LastMessageId  uint64 `json:"lastMessageId"`
	Avatar         string `json:"avatar"`
	Extra          string `json:"extra"`
}

type ConversationMember struct {
	UserUUID  string `json:"userUuid"`
	Role      uint32 `json:"role"`
	Alias     string `json:"alias"`
	MuteUntil string `json:"muteUntil"` // RFC3339 字符串
	IsPinned  uint32 `json:"isPinned"`  // 0/1
}

type CreateGroupConversationReq struct {
	UUID        string   `head:"uuid"`
	Name        string   `json:"name"`
	MemberUUIDs []string `json:"memberUuids"`
}

type CreatePrivateConversationReq struct {
	UUID     string `head:"uuid"`
	PeerUUID string `json:"peerUuid"`
}

type EmailCodeReq struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

type EmailCodeResp struct {
	UUID string `json:"uuid"`
}

type EmailPasswordLoginReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type EmailPasswordLoginResp struct {
	UUID string `json:"uuid"`
}

type EmailPasswordRegisterReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Code     string `json:"code"`
}

type EmailPasswordRegisterResp struct {
	UUID string `json:"uuid"`
}

type FriendInfo struct {
	UUID   string `json:"uuid"`
	Notice string `json:"notice"`
}

type GetConversationDetailReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
}

type GetConversationDetailResp struct {
	Info    ConversationInfo     `json:"info"`
	Members []ConversationMember `json:"members"`
}

type GetConversationsReq struct {
	UUID      string `head:"uuid"`
	PageSize  int    `json:"pageSize,default=10"`
	PageIndex int    `json:"pageIndex,default=1"`
}

type GetConversationsResp struct {
	Conversations []ConversationInfo `json:"conversations"`
}

type GetEmailCodeReq struct {
	Email string `json:"email"`
}

type GetEmailCodeResp struct {
	Code string `json:"code"`
}

type GetFriendListReq struct {
	UUID string `json:"uuid"`
}

type GetFriendListResp struct {
	Friends []FriendInfo `json:"friends"`
}

type GetMessagesReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
	BeforeId       uint64 `json:"beforeId,optional"`
	AfterId        uint64 `json:"afterId,optional"`
	Limit          int    `json:"limit,default=20"`
}

type GetMessagesResp struct {
	Messages []MessageInfo `json:"messages"`
}

type GetUnreadCountsReq struct {
	UUID string `head:"uuid"`
}

type GetUnreadCountsResp struct {
	Items []UnreadItem `json:"items"`
}

type MessageInfo struct {
	Id               uint64   `json:"id"`
	ConversationId   uint32   `json:"conversationId"`
	SendUuid         string   `json:"sendUuid"`
	MsgType          uint32   `json:"msgType"`
	Content          string   `json:"content"`
	ContentExtra     string   `json:"contentExtra"`
	ReplyToMessageId uint64   `json:"replyToMessageId"`
	MentionedUuids   []string `json:"mentionedUuids"`
	IsSystem         uint32   `json:"isSystem"`  // 0/1
	IsRevoked        uint32   `json:"isRevoked"` // 0/1
	CreatedAt        string   `json:"createdAt"`
}

type Pager struct {
	PageSize  int `json:"pageSize,default=10"` // 分页大小, 需要大于 0
	PageIndex int `json:"pageIndex,default=1"` // 分页页码, 需要大于 0
}

type PagerForm struct {
	PageSize  int `form:"pageSize,default=10"` // 分页大小, 需要大于 0
	PageIndex int `form:"pageIndex,default=1"` // 分页页码, 需要大于 0
}

type ReadMessagesReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
	UpToMessageId  uint64 `json:"upToMessageId"`
}

type ReadMessagesResp struct {
	LastReadMessageId uint64 `json:"lastReadMessageId"`
}

type RecallMessageReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
	MessageId      uint64 `json:"messageId"`
}

type RemoveMemberReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
	RemoveUUID     string `json:"removeUuid"`
}

type SearchUserReq struct {
	Email string `json:"email"`
}

type SearchUserResp struct {
	RevId string `json:"revId"`
}

type SendMessageReq struct {
	UUID             string   `head:"uuid"`
	ConversationId   uint32   `json:"conversationId"`
	ClientMsgId      string   `json:"clientMsgId"`
	MsgType          uint32   `json:"msgType"` // 1文本、2图片、3语音、4视频、5文件、6系统
	Content          string   `json:"content"`
	ContentExtra     string   `json:"contentExtra,optional"`
	ReplyToMessageId uint64   `json:"replyToMessageId,optional"`
	MentionedUuids   []string `json:"mentionedUuids,optional"`
}

type SendMessageResp struct {
	ServerMsgId uint64 `json:"serverMsgId"`
	ClientMsgId string `json:"clientMsgId"`
	CreatedAt   string `json:"createdAt"`
}

type UnreadItem struct {
	ConversationId uint32 `json:"conversationId"`
	Unread         uint32 `json:"unread"`
}

type UpdateConversationSettingsReq struct {
	UUID           string `head:"uuid"`
	ConversationId uint32 `json:"conversationId"`
	Alias          string `json:"alias,optional"`
	MuteUntil      string `json:"muteUntil,optional"`
	IsPinned       uint32 `json:"isPinned,optional"` // 0/1
}

type ValidFriendInfo struct {
	Id        uint32 `json:"id"`
	RevId     string `json:"revId"`
	RevStatus uint32 `json:"revStatus"`
}

type ValidFriendListReq struct {
	UUID string `json:"uuid"`
}

type ValidFriendListResp struct {
	Valids []ValidFriendInfo `json:"valids"`
}

type ValidFriendReq struct {
	UUID     string `json:"uuid"`     // 操作人id，一般是接受者操作
	VerifyId uint32 `json:"verifyId"` // 验证表的id
	Status   uint32 `json:"status"`   // 接受还是拒绝
}

type VersionResponse struct {
	Version string `json:"version"` //版本号
}
